BAUPLAN := PREPROC_DECLARATIONS TEMPLATE
PREPROC_DECLARATIONS := PREPROC_DECLARATION PREPROC_DECLARATIONS
PREPROC_DECLARATION := '$$' IDENTIFIER PREPROC_VAL
                     | empty
PREPROC_VAL := PRIMITIVE_TYPE
             | empty
COMPLEX_TYPE: TYPE | PRIMITIVE_TYPE
TYPE := TEMPLATE | SECTION | VARIABLE | CODE | INSTRUCTION
PRIMITIVE_TYPE := NUMERIC_TYPE | STRING | BOOLEAN
VALUED_TYPE := CODE | INSTRUCTION | PRIMITIVE_TYPE
NUMERIC_TYPE := INTEGER | DOUBLE
TEMPLATE := "*" TYPEDEF_WITH_BODY
SECTION := "@" TYPEDEF_WITH_BODY
CODE := "&" TYPEDEF_WITH_BODY
INSTRUCTION := "#" TYPEDEF_WITH_BODY
VARIABLE := "$" TYPEDEF_NO_BODY
TYPEDEF_WITH_BODY := "(" IDENTIFIER DIRECTIVE_BLOCK BODY ")"
BODY := COMPLEX_TYPE BODY
       | empty
TYPEDEF_NO_BODY := "(" IDENTIFIER DIRECTIVE_BLOCK ")"
DIRECTIVE_BLOCK := "{" DIRECTIVE_LIST "}"
                 | empty
DIRECTIVE_LIST := DIRECTIVE_KEYPART DIRECTIVE_VALPART DIRECTIVE_LIST_REST
                | empty
DIRECTIVE_LIST_REST := "|" DIRECTIVE_LIST
                     | empty
DIRECTIVE_KEYPART := IDENTIFIER
DIRECTIVE_VALPART := ":" DIRECTIVE_VAL_LIST
                   | empty
DIRECTIVE_VAL_LIST := VALUED_TYPE DIRECTIVE_VAL_REST
DIRECTIVE_VAL_REST := "," DIRECTIVE_VAL_LIST
                    | empty
INTEGER := # some regex
DOUBLE := # some regex
BOOLEAN := "true" | "false"
STRING := QUOTED_STRING | LITERAL | BAREWORD
QUOTED_STRING := '"' ALNUM '"'
LITERAL := "<<<" anything ">>>"
BAREWORD := # anything else
IDENTIFIER := /^[$A-Z_][0-9A_Z_$]*$/i
COMMENT := BLOCK_COMMENT | INLINE_COMMENT
BLOCK_COMMENT := ";;(" anything ";;)"
INLINE_COMMENT := ";;" anything
